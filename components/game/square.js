import { useState, useEffect } from 'react';
import Edge from './edge';
import utilStyles from '../../styles/square.module.css';
const Square = ({currentTurn, isSides, isFirstRow, isLastInRow,  onClick, nextSquareLeftEdgeClicked, prewSquareBottomEdgeClicked, rowIndex, columnIndex, edgesClickedFromServer }) => {
  const [completedMarker, setCompletedMarker] = useState(null); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞

  const [edgesClicked, setEdgesClicked] = useState({
    top: false,
    right: false,
    bottom: false,
    left: false,
  });
  useEffect(() => {
    setEdgesClicked(edgesClickedFromServer);
  }, [edgesClickedFromServer]);

  const handleEdgeClick = (direction) => {
    // setEdgesClicked((prevEdges) => ({
    //   ...prevEdges,
    //   [direction]: true,
    // }));
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ onClick, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   onClick(direction, rowIndex, columnIndex);

  };
  const edgeIsClicked = (direction) => {
    return edgesClicked[direction] 
    || edgesClickedFromServer[direction];
  };
  const isSquareCompleted = () => {
    // –ï—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—É—é –Ω–∏–∂–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É,
    // —Ç–∞–∫ –∫–∞–∫ –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –Ω–µ–≥–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–π —Å –¥—Ä—É–≥–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º
    if (isFirstRow || isSides ) {
      return edgesClicked.bottom && edgesClicked.top && edgesClicked.left && (nextSquareLeftEdgeClicked || edgesClicked.right) ;
    }
    // else if (typeBoard == 'diamond'){
    //   if()
    // }
    // else if(isFirstRow && isLastInRow){
    //   return edgesClicked.bottom && edgesClicked.top && edgesClicked.left && edgesClicked.right;
    // }
    // –ï—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∂–∞—Ç—É—é –≤–µ—Ä—Ö–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É,
   // —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—â–µ–π —Å –¥—Ä—É–≥–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º
    return edgesClicked.left && edgesClicked.bottom && prewSquareBottomEdgeClicked && (nextSquareLeftEdgeClicked || edgesClicked.right);
  };

  const showMarker = (currentTurn) => {
    switch (currentTurn) {
      case 0: return '‚ô•Ô∏è';
      case 1: return '‚ô£Ô∏è';
      case 2: return 'üíµ';
      case 3: return 'üíé';
      default: return null;
    }
  };
  useEffect(() => {
    if (isSquareCompleted() && !completedMarker) {
      setCompletedMarker(showMarker(currentTurn)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
    }
  }, [isSquareCompleted, currentTurn, completedMarker]);
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSX –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  return (
   <>
    {isFirstRow?
    <div className={utilStyles.firstRow}>
      <Edge 
      direction={'bottom'} 
      onClick={() => handleEdgeClick('bottom')}
      id={`edge-${rowIndex}-${columnIndex}-bottom`}
      isClicked={edgeIsClicked('bottom')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      <Edge 
      isFirstRow ={ true} 
      direction={'left'} 
      onClick={() => handleEdgeClick('left')}
      id={`edge-${rowIndex}-${columnIndex}-left`}
      isClicked={edgeIsClicked('left')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      <Edge
      direction={'top'}
      onClick={() => handleEdgeClick('top')}
      id={`edge-${rowIndex}-${columnIndex}-top`}
      isClicked={edgeIsClicked('top')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      {isLastInRow && 
      <Edge 
      isFirstRow ={true}
      direction={'right'}
      onClick={() => handleEdgeClick('right')}
      id={`edge-${rowIndex}-${columnIndex}-right`}
      isClicked={edgeIsClicked('right')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />}
      {completedMarker && <div className={utilStyles.marker}>{completedMarker}</div>}
    </div>
    :
    isSides?
    
    <div className={utilStyles.rowSides}>
      <Edge
      direction={'top'}
      onClick={() => handleEdgeClick('top')}
      id={`edge-${rowIndex}-${columnIndex}-top`}
      isClicked={edgeIsClicked('top')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      <Edge 
      direction={'bottom'} 
      onClick={() => handleEdgeClick('bottom')}
      isSides={true}
      id={`edge-${rowIndex}-${columnIndex}-bottom`}
      isClicked={edgeIsClicked('bottom')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      <Edge 
      direction={'left'} 
      isFirstRow ={true} 
      onClick={() => handleEdgeClick('left')}
      id={`edge-${rowIndex}-${columnIndex}-left`}
      isClicked={edgeIsClicked('left')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      {isLastInRow && <Edge 
      direction={'right'} 
      isFirstRow ={true}
      onClick={() => handleEdgeClick('right')}
      id={`edge-${rowIndex}-${columnIndex}-right`}
      isClicked={edgeIsClicked('right')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />}
       {completedMarker && <div className={utilStyles.marker}>{completedMarker}</div>}
    </div>
    :
    <div
     className={utilStyles.container}
     >
      <Edge 
      direction={'bottom'} 
      onClick={() => handleEdgeClick('bottom')}
      id={`edge-${rowIndex}-${columnIndex}-bottom`}
      isClicked={edgeIsClicked('bottom')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      <Edge 
      direction={'left'} 
      onClick={() => handleEdgeClick('left')}
      id={`edge-${rowIndex}-${columnIndex}-left`}
      isClicked={edgeIsClicked('left')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />
      {isLastInRow && <Edge 
      direction={'right'} 
      onClick={() => handleEdgeClick('right')}
      id={`edge-${rowIndex}-${columnIndex}-right`}
      isClicked={edgeIsClicked('right')} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞
      />}
    {completedMarker && <div className={utilStyles.marker}>{completedMarker}</div>}
    </div>
  }
   </> 
  )
};

export default Square;
